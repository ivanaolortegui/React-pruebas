{"version":3,"sources":["logo.svg","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","props","react_default","a","createElement","className","href","title","Contador","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","aumentar","setState","contador","state","onClick","Component","Formulario","_this2","submitChange","event","preventDefault","console","log","email","password","value","property","_this3","onChange","even","actualizar","target","type","placeholder","App","components_Navigation","src","logo","alt","App_Contador","App_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oPCUtBC,MARlB,SAAoBC,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAAf,IAA6CH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,cACnEJ,EAAMM,SCIRC,cACJ,SAAAA,EAAYP,GAAM,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KAMVe,SAAW,WACTP,EAAKQ,SAAS,CAACC,SAAUT,EAAKU,MAAMD,SAAU,KAN5CT,EAAKU,MAAO,CACRD,SAAU,GAHAT,wEAWlB,OAAQP,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,aAAMQ,KAAKO,MAAMD,SAAjB,KACChB,EAAAC,EAAAC,cAAA,UAAQgB,QAAWR,KAAKI,UAAxB,sBAdiBK,aAmBjBC,cACJ,SAAAA,EAAYrB,GAAM,IAAAsB,EAAA,OAAAb,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACdC,EAAAb,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,KAAMX,KAeVuB,aAAa,SAACC,GACZA,EAAMC,iBACNC,QAAQC,IAAIL,EAAKJ,QAhBfI,EAAKJ,MAAQ,CACVU,MAAM,GACNC,SAAS,IAJEP,0EAUPQ,EAAMC,GACf,IAAIb,EAAQ,GACZA,EAAMa,GAAUD,EAChBnB,KAAKK,SAASE,oCAQP,IAAAc,EAAArB,KACT,OAAQV,EAAAC,EAAAC,cAAA,YACLF,EAAAC,EAAAC,cAAA,SAAO8B,SAAU,SAACC,GAAUF,EAAKG,WAAWD,EAAKE,OAAON,MAAO,UAC9DO,KAAK,QAAQC,YAAY,SACzBR,MAAOnB,KAAKO,MAAMU,QACnB3B,EAAAC,EAAAC,cAAA,SAAO8B,SAAU,SAACC,GAAUF,EAAKG,WAAWD,EAAKE,OAAON,MAAM,aAAcO,KAAK,WAAWC,YAAY,MACtGR,MAAOnB,KAAKO,MAAMW,WACpB5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOgB,QAAW,SAACe,GAAUF,EAAKT,aAAaW,IAAUG,KAAK,SAAUP,MAAM,oBA9B1DV,aAiDVmB,MAXf,WACE,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACqC,EAAD,CAAYlC,MAAO,WAChBL,EAAAC,EAAAC,cAAA,OAAKsC,IAAKC,IAAMtC,UAAU,WAAWuC,IAAI,SAC5C1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,QC5DeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4bcc21b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Navigation(props) {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\"> <a href=\".\" className=\"text-white\">\n       {props.title}\n        </a></nav>\n      );\n  }\n  \n  export default  Navigation;","import React, {Component}  from 'react';\nimport logo from './logo.svg';\nimport './css/App.css';\n\nimport Navigation from './components/Navigation'\n//import Contador from './components/Contador';\n\n\n\nclass Contador extends Component {\n  constructor(props){\n      super(props);\n      this.state ={\n          contador: 0\n      }\n  }\n\n  aumentar = ()=>{\n    this.setState({contador: this.state.contador +1})\n  }\n  render (){\n  return (<div> \n     <p> { this.state.contador } </p>\n      <button onClick= { this.aumentar } > Click me </button>\n  </div>)\n  }; \n}\n\nclass Formulario extends Component {\n  constructor(props){\n      super(props);\n      this.state = {\n         email:'',\n         password:''\n      }\n  }\n\n\n  \n  actualizar(value,property){\n    let state = {};\n    state[property]=value;\n    this.setState(state);\n  }\n\n  submitChange=(event)=>{\n    event.preventDefault();\n    console.log(this.state);\n    \n  }\n  render (){\n  return (<form> \n     <input onChange={(even) => {this.actualizar(even.target.value, 'email')}}\n      type=\"email\" placeholder=\"Correo\"\n      value={this.state.email}/> \n     <input onChange={(even) => {this.actualizar(even.target.value,'password')}} type=\"password\" placeholder=\"***\"\n       value={this.state.password}/> \n     <div>\n     <input onClick= { (even) => {this.submitChange(even)} }  type=\"submit\"  value=\"enviar\"/>  \n     </div>\n  </form>)\n  }; \n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Navigation title =\"Tareas\"/>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n     <Contador/>\n     <Formulario/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}